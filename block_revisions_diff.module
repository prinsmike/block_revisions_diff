<?php

/**
 * Implements hook_menu().
 */
function block_revisions_diff_menu() {
  $items['admin/structure/block/manage/%/%/revisions/view'] = array(
    'title' => 'Compare revisions',
    'page callback' => 'block_revisions_diff_compare',
    'page arguments' => array(1, 4, 5, 6),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'block_revisions_diff_access',
    'access arguments' => array(1),
    'tab_parent' => 'admin/structure/block/manage/%/%/revisions',
    );
}

/**
 * Implements hook_menu_alter().
 */
function block_revisions_diff_menu_alter(&$items) {
	$items['admin/structure/block/manage/%/%/revisions'] = array(
		'title' => 'List revisions',
		'page callback' => 'block_revisions_diff_overview',
		'page arguments' => array(5),
		'access callback' => 'block_revisions_diff_access',
		'access arguments' => array(4, 5),
		'type' => MENU_LOCAL_TASK,
		);
}

function block_revisions_diff_overview($delta) {
	$title = db_query("SELECT info FROM {block_custom} WHERE bid = :bid", array(':bid' => $delta))->fetchField();
	drupal_set_title(t('Revisions for %title', array('%title' => $title)), PASS_THROUGH);
  	return drupal_get_form('block_revisions_diff_revisions', $delta);
}

function block_revisions_diff_revisions($form, $form_state, $delta) {

	module_load_include('inc', 'block_revisions', 'block_revisions.admin');

  $form['delta'] = array(
    '#type' => 'hidden',
    '#value' => $delta,
  );
	
	// Fetch information about the block and the current revision from the database.
	$block = db_query('SELECT b.info, b.timestamp, b.uid FROM {block_custom} b WHERE b.bid = :bid', array(':bid' => $delta))->fetchObject();

	$revision_list = block_revision_list($delta);
	$latest_revision = reset($revision_list);

  dsm('function: block_revisions_diff_compare()');
  dsm($revision_list);

  	// By comparing the timestamp of the block with the timestamp of the
  	// most recent revision, we can determine if the block was altered
  	// after that revision was created. If it is, warn the user that
  	// the most recent revision differs from the actual block content.
	if ($block->timestamp !== $latest_revision->timestamp) {
		$account = array_shift(user_load_multiple(array($block->uid)));
		drupal_set_message(t('Warning: the block has been altered since the most recent revision. The latest, non-versioned, edit was made by !username on %timestamp.', array('!username' => theme('username', array('account' => $account)), '%timestamp' => format_date($block->timestamp))), 'warning');
	}

	if (count($revision_list) > REVISION_LIST_SIZE) {
    // If the list of revisions is longer than the number shown on one page
    // split the array.
    $page = isset($_GET['page']) ? $_GET['page'] : '0';
    $revision_chunks = array_chunk(block_revision_list($delta), REVISION_LIST_SIZE);
    $revisions = $revision_chunks[$page];
    // Set up global pager variables as would 'pager_query' do.
    // These variables are then used in the theme('pager') call later.
    global $pager_page_array, $pager_total, $pager_total_items;
    $pager_total_items[0] = count($revision_list);
    $pager_total[0] = ceil(count($revision_list) / REVISION_LIST_SIZE);
    $pager_page_array[0] = max(0, min($page, ((int) $pager_total[0]) - 1));
  }
  else {
    $revisions = $revision_list;
  }

  $revert_permission = FALSE;
  if (user_access('revert revisions') || user_access('administer nodes')) {
    $revert_permission = TRUE;
  }
  $delete_permission = FALSE;
  if (user_access('delete revisions') || user_access('administer nodes')) {
    $delete_permission = TRUE;
  }

  foreach ($revisions as $revision) {
    $operations = array();
    $revision_ids[$revision->vid] = '';

    $revision_log = ($revision->log != '') ? '<p class="revision-log">' . filter_xss($revision->log) . '</p>' : '';
    if ($revision->vid == $latest_revision->vid) {
      $form['info'][$revision->vid] = array(
        '#markup' => t('!date by !username', array(
          '!date' => l(format_date($revision->timestamp, 'small'), "admin/structure/block/manage/block/$delta"),
          '!username' => theme('username', array('account' => $revision)))) . $revision_log,
      );
    }
    else {
      $diff_date = format_date($revision->timestamp, 'small');
      $form['info'][$revision->vid] = array(
        '#markup' => t('!date by !username', array(
          '!date' => $diff_date,
          '!username' => theme('username', array('account' => $revision)))
        ) . $revision_log,
      );
      if ($revert_permission) {
        $operations[] = array(
          '#markup' => l(t('Revert'), "admin/structure/block/revisions/revert/$delta/$revision->vid"),
        );
      }
      if ($delete_permission) {
        $operations[] = array(
          '#markup' => l(t('Delete'), "admin/structure/block/revisions/delete/$delta/$revision->vid"),
        );
      }
      // Set a dummy, even if the user has no permission for the other
      // operations, so that we can check if the operations array is
      // empty to know if the row denotes the current revision.
      $operations[] = array();
    }
    $form['operations'][$revision->vid] = $operations;

  }
  $new_vid = key($revision_ids);
  next($revision_ids);
  $old_vid = key($revision_ids);
  $form['diff']['old'] = array(
    '#type' => 'radios',
    '#options' => $revision_ids,
    '#default_value' => $old_vid,
  );
  $form['diff']['new'] = array(
    '#type' => 'radios',
    '#options' => $revision_ids,
    '#default_value' => $new_vid,
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Compare'));

  if (count($revision_list) > REVISION_LIST_SIZE) {
    $form['#suffix'] = theme('pager');
  }
  $form['#attached'] = diff_build_attachments(TRUE);
  return $form;
}

function block_revisions_diff_revisions_submit($form, &$form_state) {
  $old_vid = min($form_state['values']['old'], $form_state['values']['new']);
  $new_vid = max($form_state['values']['old'], $form_state['values']['new']);
  $form_state['redirect'] = 'admin/structure/block/manage/block/' . $form_state['values']['delta'] . '/revisions/view/' . $old_vid . '/' . $new_vid;
}

function block_revisions_diff_access($module, $delta) {
  if ($module !== 'block') {
    return FALSE;
  }
  $revision_count = db_query('SELECT count(vid) FROM {boxes_revisions} WHERE bid = :bid', array(':bid' => $delta))->fetchField();

  return user_access('administer blocks') && ($revision_count >= 1);
}

function block_revisions_diff_compare($delta, $old_vid, $new_vid, $state = NULL) {
  // Attaches the CSS.
  $build['#attached'] = diff_build_attachments();

  $default_state = variable_get('diff_default_state_node', 'raw');
  if (empty($state)) {
    $state = $default_state;
  }
  $state = str_replace('-', '_', $state);
  if (!array_key_exists($state, diff_available_states())) {
    $state = $default_state;
  }

  $revision_list = block_revision_list($delta);
  $latest_revision = reset($revision_list);

  dsm('function: block_revisions_diff_compare()');
  dsm($revision_list);

  // Generate table header (date, username, log message).
  $old_header = t('!date by !username', array(
    '!date' => l(format_date($old_node->revision_timestamp), "node/$node->nid/revisions/$old_node->vid/view", array('absolute' => 1)),
    '!username' => theme('username', array('account' => $node_revisions[$old_vid])),
  ));
  $new_header = t('!date by !username', array(
    '!date' => l(format_date($new_node->revision_timestamp), "node/$node->nid/revisions/$new_node->vid/view", array('absolute' => 1)),
    '!username' => theme('username', array('account' => $node_revisions[$new_vid])),
  ));

  $old_log = $old_node->log != '' ? '<p class="revision-log">' . filter_xss($old_node->log) . '</p>' : '';
  $new_log = $new_node->log != '' ? '<p class="revision-log">' . filter_xss($new_node->log) . '</p>' : '';

  // Generate previous diff/next diff links.
  $nav_suffix = ($default_state != $state) ? '/' . str_replace('_', '-', $state) : '';
  $next_vid = _diff_get_next_vid($node_revisions, $new_vid);
  if ($next_vid) {
    $next_link = l(t('Next difference >'), 'node/' . $node->nid . '/revisions/view/' . $new_vid . '/' . $next_vid . $nav_suffix, array('absolute' => 1));
  }
  else {
    $next_link = '';
  }
  $prev_vid = _diff_get_previous_vid($node_revisions, $old_vid);
  if ($prev_vid) {
    $prev_link = l(t('< Previous difference'), 'node/' . $node->nid . '/revisions/view/' . $prev_vid . '/' . $old_vid . $nav_suffix, array('absolute' => 1));
  }
  else {
    $prev_link = '';
  }

  $header = _diff_default_header($old_header, $new_header);
  $rows = array();
  if ($old_log || $new_log) {
    $rows['logs'] = array(
      array(
        'data' => $old_log,
        'colspan' => 2,
      ),
      array(
        'data' => $new_log,
        'colspan' => 2,
      ),
    );
  }
  $rows['navigation'] = array(
    array(
      'data' => $prev_link,
      'class' => array('diff-prevlink'),
      'colspan' => 2,
    ),
    array(
      'data' => $next_link,
      'class' => array('diff-nextlink'),
      'colspan' => 2,
    ),
  );

  $links = array();
  foreach (diff_available_states('node') as $alternative_state => $label) {
    if ($alternative_state == $state) {
      // @todo: Should we show both or just alternatives?
    }
    $links[$alternative_state] = array(
      'title' => $label,
      'href' => "node/{$node->nid}/revisions/view/{$old_vid}/{$new_vid}" . ($alternative_state == $default_state ? '' : '/' . str_replace('_', '-', $alternative_state)),
    );
  }
  if (count($links) > 1) {
    $state_links = theme('links', array(
      'links' => $links,
      'attributes' => array('class' => array('links', 'inline')),
    ));
    $rows['states'] = array(
      array(
        'data' => $state_links,
        'class' => 'diff-links',
        'colspan' => 4,
      ),
    );
  }
  $rows = array_merge($rows, _diff_body_rows($old_node, $new_node, $state));

  $build['diff_table'] = array(
    '#theme' => 'table__diff__standard',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('class' => array('diff')),
    '#colgroups' => _diff_default_cols(),
    '#sticky' => FALSE,
  );

  // Allow users to hide or set the display mode of the preview.
  if (node_is_page($node) && $view_mode = variable_get('diff_view_mode_preview_node_' . $new_node->type, 'full')) {
    $header = '';
    if ($node->vid == $new_vid) {
      $header .= '<div class="diff-section-title">' . t('Current revision:') . '</div>';
    }
    else {
      $header .= '<div class="diff-section-title">' . t('Revision of @new_date:', array('@new_date' => format_date($new_node->revision_timestamp))) . '</div>';
    }
    $build['diff_preview']['header']['#markup'] = $header;
    // Don't include node links or comments when viewing the diff.
    $build['diff_preview']['content'] = node_view($new_node, $view_mode);
    if (isset($build['diff_preview']['content']['links'])) {
      unset($build['diff_preview']['content']['links']);
    }
    if (isset($build['diff_preview']['content']['comments'])) {
      unset($build['diff_preview']['content']['comments']);
    }
  }
  return $build;
}

/**
 * Implements hook_theme().
 */
function block_revisions_diff_theme() {
	return array(
    'block_revisions_diff_revisions' => array(
      'render element' => 'form',
    ),
    );
}

/**
 * Theme function to display the revisions formular.
 */
function theme_block_revisions_diff_revisions($vars) {
  $form = $vars['form'];
  $output = '';

  // Overview table:
  $header = array(
    t('Revision'),
    array('data' => drupal_render($form['submit']), 'colspan' => 2),
    array('data' => t('Operations'), 'colspan' => 2),
  );
  if (isset($form['info']) && is_array($form['info'])) {
    foreach (element_children($form['info']) as $key) {
      $row = array();
      if (isset($form['operations'][$key][0])) {
        // Note: even if the commands for revert and delete are not permitted,
        // the array is not empty since we set a dummy in this case.
        $row[] = drupal_render($form['info'][$key]);
        $row[] = drupal_render($form['diff']['old'][$key]);
        $row[] = drupal_render($form['diff']['new'][$key]);
        $row[] = drupal_render($form['operations'][$key][0]);
        $row[] = drupal_render($form['operations'][$key][1]);
        $rows[] = array(
          'data' => $row,
          'class' => array('diff-revision'),
        );
      }
      else {
        // The current revision (no commands to revert or delete).
        $row[] = array(
          'data' => drupal_render($form['info'][$key]),
          'class' => array('revision-current'),
        );
        $row[] = array(
          'data' => drupal_render($form['diff']['old'][$key]),
          'class' => array('revision-current'),
        );
        $row[] = array(
          'data' => drupal_render($form['diff']['new'][$key]),
          'class' => array('revision-current'),
        );
        $row[] = array(
          'data' => '<strong>' . t('This is the published revision.') . '</strong>',
          'class' => array('revision-current'),
          'colspan' => '2',
        );
        $rows[] = array(
          'data' => $row,
          'class' => array('revision-published diff-revision'),
        );
      }
    }
  }
  $output .= theme('table__diff__revisions', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => FALSE,
    'attributes' => array('class' => array('diff-revisions')),
  ));

  $output .= drupal_render_children($form);
  return $output;
}